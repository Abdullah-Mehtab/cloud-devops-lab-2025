version: '3.8'

services:
  # Jenkins with persistent volume
  jenkins:
    image: jenkins/jenkins:lts-jdk11
    container_name: jenkins
    ports:
      - "8080:8080"
    volumes:
      - jenkins_data:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/bin/docker:/usr/bin/docker
    environment:
      - JAVA_OPTS=-Djenkins.install.runSetupWizard=false
    restart: unless-stopped

  # SonarQube with PostgreSQL
  sonarqube:
    image: sonarqube:lts-community
    container_name: sonarqube
    ports:
      - "9001:9000"
    environment:
      - SONAR_JDBC_URL=jdbc:postgresql://sonar-db:5432/sonar
      - SONAR_JDBC_USERNAME=sonar
      - SONAR_JDBC_PASSWORD=sonar
      - SONAR_ES_JVM_OPTS=-Xms512m -Xmx512m
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
    depends_on:
      - sonar-db
    restart: unless-stopped

  # SonarQube Database
  sonar-db:
    image: postgres:13-alpine
    container_name: sonar-db
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
      - POSTGRES_DB=sonar
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: unless-stopped

  # Grafana for dashboards
  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped

  # Python Flask Application - built from source
  python-app:
    build: 
      context: /home/devops/apps/python-app
      dockerfile: Dockerfile
    container_name: python-app
    ports:
      - "8000:8000"
    restart: unless-stopped

  # HTML Application - built from source
  html-app:
    build:
      context: /home/devops/apps/html-app
      dockerfile: Dockerfile
    container_name: html-app
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - jenkins
      - sonarqube
      - grafana
      - python-app
      - html-app
    restart: unless-stopped

volumes:
  jenkins_data:
  sonarqube_data:
  sonarqube_extensions:
  postgres_data:
  prometheus_data:
  grafana_data:
