---
- name: Deploy Docker Stack with retries and health checks
  hosts: app_server
  become: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3

  tasks:
    - name: Ensure docker directory exists
      file:
        path: /home/devops/apps/docker
        state: directory
        owner: devops
        group: devops
        mode: 0755

    - name: Copy docker-compose.yml
      copy:
        src: ../docker/docker-compose.yml
        dest: /home/devops/apps/docker/docker-compose.yml
        owner: devops
        group: devops
        mode: 0644

    - name: Create nginx directory
      file:
        path: /home/devops/apps/docker/nginx
        state: directory
        owner: devops
        group: devops
        mode: 0755

    - name: Copy nginx.conf
      copy:
        src: ../docker/nginx/nginx.conf
        dest: /home/devops/apps/docker/nginx/nginx.conf
        owner: devops
        group: devops
        mode: 0644

    - name: Create prometheus directory
      file:
        path: /home/devops/apps/docker/prometheus
        state: directory
        owner: devops
        group: devops
        mode: 0755

    - name: Copy prometheus.yml
      copy:
        src: ../docker/prometheus/prometheus.yml
        dest: /home/devops/apps/docker/prometheus/prometheus.yml
        owner: devops
        group: devops
        mode: 0644

    - name: Install Docker SDK for Python
      pip:
        name: docker
        state: present
      become: yes

    - name: Install Docker Compose plugin
      pip:
        name: docker-compose
        state: present
      become: yes

    - name: Ensure Docker is running
      systemd:
        name: docker
        state: started
        enabled: yes
      become: yes

    - name: Set vm.max_map_count for Elasticsearch
      sysctl:
        name: vm.max_map_count
        value: '262144'
        state: present
        sysctl_file: /etc/sysctl.conf
        reload: yes
      become: yes

    - name: Ensure swap file exists (2GB)
      become: yes
      ansible.builtin.shell: |
        if ! swapon --show | grep -q '/swapfile'; then
          dd if=/dev/zero of=/swapfile bs=1M count=2048 status=progress
          chmod 600 /swapfile
          mkswap /swapfile
          swapon /swapfile
          echo '/swapfile none swap sw 0 0' >> /etc/fstab
        fi
      args:
        creates: /swapfile
      changed_when: false

    - name: Copy Python application code and Dockerfile
      copy:
        src: "{{ item }}"
        dest: "/home/devops/apps/python-app/"
        owner: devops
        group: devops
        mode: 0644
      with_items:
        - "../python-app/app.py"
        - "../python-app/requirements.txt"
        - "../python-app/Dockerfile"
        - "../python-app/tests/"

    - name: Copy HTML application code and Dockerfile
      copy:
        src: "{{ item }}"
        dest: "/home/devops/apps/html-app/"
        owner: devops
        group: devops
        mode: 0644
      with_items:
        - "../html-app/index.html"
        - "../html-app/Dockerfile"

    - name: Ensure correct permissions on app directories
      file:
        path: "{{ item }}"
        state: directory
        owner: devops
        group: devops
        mode: 0755
      with_items:
        - "/home/devops/apps/python-app"
        - "/home/devops/apps/html-app"

    - name: Verify Dockerfile presence
      stat:
        path: "{{ item }}"
      register: dockerfile_check
      with_items:
        - "/home/devops/apps/python-app/Dockerfile"
        - "/home/devops/apps/html-app/Dockerfile"

    - name: Display Dockerfile check results
      debug:
        msg: "Dockerfile exists at {{ item.item }}: {{ item.stat.exists }}"
      with_items: "{{ dockerfile_check.results }}"

    # --- UPDATED: Pull Docker images with retry & debugging ---
    - name: Pull Docker images with retries
      shell: |
        echo "=== Starting Docker image pull ==="
        export COMPOSE_HTTP_TIMEOUT=300
        export DOCKER_CLIENT_TIMEOUT=300
        docker compose -f /home/devops/apps/docker/docker-compose.yml pull
        echo "=== Finished Docker image pull ==="
      args:
        chdir: /home/devops/apps/docker
      register: pull_result
      retries: 5
      delay: 30
      until: pull_result.rc == 0
      ignore_errors: yes
      changed_when: false

    - name: Debug pull result if it failed after all retries
      debug:
        msg:
          - "Docker pull failed after all retries. Last rc={{ pull_result.rc }}"
          - "stdout: {{ pull_result.stdout_lines | default([]) | join('\\n') }}"
          - "stderr: {{ pull_result.stderr_lines | default([]) | join('\\n') }}"
      when: pull_result is failed

    # --- UPDATED: Compose stack with debugging ---
    - name: Start the Docker stack
      shell: |
        echo "=== Starting Docker stack compose ==="
        docker compose -f /home/devops/apps/docker/docker-compose.yml up -d --build
        echo "=== Docker stack compose finished ==="
      args:
        chdir: /home/devops/apps/docker
      when: pull_result is succeeded

    - name: Verify containers are running
      shell: docker ps --format "table {{ '{{' }}.Names{{ '}}' }}\t{{ '{{' }}.Status{{ '}}' }}\t{{ '{{' }}.Ports{{ '}}' }}"
      register: docker_ps
      changed_when: false

    - name: Display container status
      debug:
        var: docker_ps.stdout

    - name: Wait for Jenkins container to be running
      shell: |
        until docker ps --filter "name=jenkins" --format "{{ '{{' }}.Names{{ '}}' }}" | grep -q "jenkins"; do
          echo "Waiting for Jenkins container to start..."
          sleep 5
        done
        echo "Jenkins container is running"
      args:
        executable: /bin/bash
      register: wait_result
      changed_when: false

    - name: Check if tools are already installed
      shell: |
        docker exec jenkins which ansible && docker exec jenkins which sonar-scanner
      args:
        executable: /bin/bash
      register: tools_check
      ignore_errors: yes
      changed_when: false

    - name: Install tools in Jenkins container (if not already installed)
      shell: |
        docker exec -u root jenkins /bin/bash -c "
          # Update package list
          apt-get update
          
          # Install basic tools
          apt-get install -y ansible wget unzip
          
          # Download and install sonar-scanner in /usr/local instead of /opt
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip -O /tmp/sonar-scanner.zip
          unzip /tmp/sonar-scanner.zip -d /usr/local
          mv /usr/local/sonar-scanner-4.8.0.2856-linux /usr/local/sonar-scanner
          ln -sf /usr/local/sonar-scanner/bin/sonar-scanner /usr/local/bin/sonar-scanner
          rm /tmp/sonar-scanner.zip
          
          echo 'Tools installation completed successfully'
        "
      args:
        executable: /bin/bash
      when: tools_check.rc != 0

    - name: Fix Docker permissions in Jenkins container
      shell: |
        docker exec -u root jenkins /bin/bash -c "
          # Add jenkins user to docker group
          groupadd -f -g 999 docker
          usermod -aG docker jenkins
          chmod 666 /var/run/docker.sock
          echo 'Docker permissions fixed'
        "
      args:
        executable: /bin/bash

    - name: Verify tools installation
      shell: |
        docker exec jenkins ansible --version &&
        docker exec jenkins sonar-scanner --version &&
        docker exec jenkins docker --version
      args:
        executable: /bin/bash
      register: verify_tools
      changed_when: false

    - name: Display verification results
      debug:
        msg: "{{ verify_tools.stdout }}"