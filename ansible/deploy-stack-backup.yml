---
- name: Deploy Docker Stack with compose v2
  hosts: app_server
  become: yes  # Need sudo for docker commands
  vars:
    ansible_python_interpreter: /usr/bin/python3
  tasks:
    - name: Ensure docker directory exists
      file:
        path: /home/devops/apps/docker
        state: directory
        owner: devops
        group: devops
        mode: 0755

    - name: Copy docker-compose.yml
      copy:
        src: ../docker/docker-compose.yml
        dest: /home/devops/apps/docker/docker-compose.yml
        owner: devops
        group: devops
        mode: 0644

    - name: Create nginx directory
      file:
        path: /home/devops/apps/docker/nginx
        state: directory
        owner: devops
        group: devops
        mode: 0755

    - name: Copy nginx.conf
      copy:
        src: ../docker/nginx/nginx.conf
        dest: /home/devops/apps/docker/nginx/nginx.conf
        owner: devops
        group: devops
        mode: 0644

    - name: Create prometheus directory
      file:
        path: /home/devops/apps/docker/prometheus
        state: directory
        owner: devops
        group: devops
        mode: 0755

    - name: Copy prometheus.yml
      copy:
        src: ../docker/prometheus/prometheus.yml
        dest: /home/devops/apps/docker/prometheus/prometheus.yml
        owner: devops
        group: devops
        mode: 0644

    - name: Install Docker SDK for Python
      pip:
        name: docker
        state: present
      become: yes

    - name: Install Docker Compose plugin
      pip:
        name: docker-compose
        state: present
      become: yes

    - name: Ensure Docker is running
      systemd:
        name: docker
        state: started
        enabled: yes
      become: yes

    - name: Copy Python application code and Dockerfile
      copy:
        src: "{{ item }}"
        dest: "/home/devops/apps/python-app/"
        owner: devops
        group: devops
        mode: 0644
      with_items:
        - "../python-app/app.py"
        - "../python-app/requirements.txt"
        - "../python-app/Dockerfile"
        - "../python-app/tests/"

    - name: Copy HTML application code and Dockerfile
      copy:
        src: "{{ item }}"
        dest: "/home/devops/apps/html-app/"
        owner: devops
        group: devops
        mode: 0644
      with_items:
        - "../html-app/index.html"
        - "../html-app/Dockerfile"

    - name: Ensure correct permissions on app directories
      file:
        path: "{{ item }}"
        state: directory
        owner: devops
        group: devops
        mode: 0755
      with_items:
        - "/home/devops/apps/python-app"
        - "/home/devops/apps/html-app"

    - name: Verify Dockerfile presence
      stat:
        path: "{{ item }}"
      register: dockerfile_check
      with_items:
        - "/home/devops/apps/python-app/Dockerfile"
        - "/home/devops/apps/html-app/Dockerfile"

    - name: Display Dockerfile check results
      debug:
        msg: "Dockerfile exists at {{ item.item }}: {{ item.stat.exists }}"
      with_items: "{{ dockerfile_check.results }}"

    - name: Deploy Docker stack using docker compose
      command:
        cmd: docker compose up -d --build
        chdir: /home/devops/apps/docker
      environment:
        COMPOSE_PROJECT_NAME: "devops-stack"
      register: compose_output

    - name: Display Docker Compose output
      debug:
        var: compose_output.stdout_lines

    # --- NEW UPDATE: Service Health Checks ---
    - name: Wait for services to become healthy
      wait_for:
        host: "127.0.0.1"
        port: "{{ item.port }}"
        delay: 10
        state: started
        timeout: 180
      loop:
        - { name: 'Jenkins', port: 8080 }
        - { name: 'SonarQube', port: 9000 }
        - { name: 'Grafana', port: 3000 }
        - { name: 'Prometheus', port: 9090 }
      ignore_errors: yes  # This is important. If one service fails, others can still be checked.
      changed_when: false
      register: service_health

    - name: Debug service health status
      debug:
        msg: "Service {{ item.item.name }} (port {{ item.item.port }}) is {{ 'reachable' if item.success else 'UNREACHABLE' }}"
      loop: "{{ service_health.results }}"
